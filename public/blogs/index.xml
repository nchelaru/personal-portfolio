<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on The Perennial Beginner</title>
    <link>/blogs/</link>
    <description>Recent content in Blog on The Perennial Beginner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Oct 2017 22:27:21 -0500</lastBuildDate>
    
	<atom:link href="/blogs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Interactive circle packing plots</title>
      <link>/blogs/interactive-circle-packing-plots/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/blogs/interactive-circle-packing-plots/</guid>
      <description>I was looking for something suited for visualizing hierarchical categorical data that goes beyond the regular bar graphs. This D3 zoomable circle packing visualization, done using the circlepackeR package, uses a series of nested circles that you can click on and zoom in/out of. To learn more, please see the official documentation by the package author.
As usual, we will use the IBM Telco customer churn dataset.</description>
    </item>
    
    <item>
      <title>Set up your own Google Custom Search Engine</title>
      <link>/blogs/set-up-your-own-google-custom-search-engine/</link>
      <pubDate>Sat, 23 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/blogs/set-up-your-own-google-custom-search-engine/</guid>
      <description>A while ago, I was trying to integrate a recipe search functionality into my grocery shopping dashboard. To get Google search results programmatically, I found this code snippet by the Stack Overflow user mbdevpl using the Python client library for Googleâ€™s discovery based APIs:
## Import libraries from googleapiclient.discovery import build ## Set credentials my_api_key = &amp;quot;API_key&amp;quot; my_cse_id = &amp;quot;CSE_ID&amp;quot; ## Define function def google_search(search_term, api_key, cse_id, **kwargs): service = build(&amp;quot;customsearch&amp;quot;, &amp;quot;v1&amp;quot;, developerKey=api_key) res = service.</description>
    </item>
    
    <item>
      <title>Data science podcast explorer</title>
      <link>/blogs/data-science-podcast-explorer/</link>
      <pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/blogs/data-science-podcast-explorer/</guid>
      <description>As a fun programming exercise, I recently created a Shiny app that allows users to explore and discover podcasts on data science, machine learning and big data. This post is a peek behind the curtains, showing how the database that powers the Shiny app is created and set up to update every 24 hours.
1. Connect to PostgreSQL database First, we will set up the connection to my Heroku PostgreSQL database, which you can get for free (but limited to 10,000 rows).</description>
    </item>
    
  </channel>
</rss>