<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Perennial Beginner</title>
    <link>/</link>
    <description>Recent content on The Perennial Beginner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Nov 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Interactive circle packing plots</title>
      <link>/blogs/interactive-circle-packing-plots/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/blogs/interactive-circle-packing-plots/</guid>
      <description>I was looking for something suited for visualizing hierarchical categorical data that goes beyond the regular bar graphs. This D3 zoomable circle packing visualization, done using the circlepackeR package, uses a series of nested circles that you can click on and zoom in/out of. To learn more, please see the official documentation by the package author.
As usual, we will use the IBM Telco customer churn dataset.</description>
    </item>
    
    <item>
      <title>November 24, 2019</title>
      <link>/post/bits-and-bytes-november-24-2019/</link>
      <pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/bits-and-bytes-november-24-2019/</guid>
      <description>Projects nlp Analysis of data science topic trends on Medium.com since 2009 [ Shiny dashboard ]
post Python packages that take data science project write-ups beyond Jupyter notebooks [ Intelligence Refinery ]

 Fun finds   cicerone    Create guided tours of Shiny applications using driver.js.     reactable    Interactive data tables for R, based on the React Table library and made with reactR.</description>
    </item>
    
    <item>
      <title>Set up your own Google Custom Search Engine</title>
      <link>/blogs/set-up-your-own-google-custom-search-engine/</link>
      <pubDate>Sat, 23 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/blogs/set-up-your-own-google-custom-search-engine/</guid>
      <description>A while ago, I was trying to integrate a recipe search functionality into my grocery shopping dashboard. To get Google search results programmatically, I found this code snippet by the Stack Overflow user mbdevpl using the Python client library for Googleâ€™s discovery based APIs:
## Import libraries from googleapiclient.discovery import build ## Set credentials my_api_key = &amp;quot;API_key&amp;quot; my_cse_id = &amp;quot;CSE_ID&amp;quot; ## Define function def google_search(search_term, api_key, cse_id, **kwargs): service = build(&amp;quot;customsearch&amp;quot;, &amp;quot;v1&amp;quot;, developerKey=api_key) res = service.</description>
    </item>
    
  </channel>
</rss>